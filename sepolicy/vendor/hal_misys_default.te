type hal_misys_default, domain;
hal_server_domain(hal_misys_default, hal_misys)

type hal_misys_default_exec, exec_type, vendor_file_type, file_type;

init_daemon_domain(hal_misys_default)

r_dir_file(hal_misys_default, firmware_file)
r_dir_file(hal_misys_default, mnt_vendor_file)

# allow hal_misys_default mnt_vendor_file:dir { read getattr open write search add_name remove_name rmdir };
# allow hal_misys_default mnt_vendor_file:file { read getattr open write create unlink };
# allow hal_misys_default proc:file { read write getattr setattr open };
# allow hal_misys_default hidl_memory_hwservice:hwservice_manager { find };
# allow hal_misys_default property_socket:sock_file { write };
# allow hal_misys_default vendor_default_prop:file { read getattr map open };
# allow hal_misys_default vendor_system_prop:file { read getattr map open };
# allow hal_misys_default property_socket:sock_file { write };
# allow hal_misys_default init:unix_stream_socket { connectto };
# allow hal_misys_default vendor_system_prop:property_service { set };
# allow hal_misys_default vendor_system_prop:file { read getattr map open };
# allow hal_misys_default vendor_data_file:file { read write create getattr setattr open };
# allow hal_misys_default vendor_data_file:dir { write add_name };
# allow hal_misys_default system_app:binder { transfer };
# allow hal_misys_default hal_allocator_server:binder { call };
# allow hal_misys_default hal_allocator_server:fd { use };
# allow hal_misys_default su:binder { call transfer };
# allow hal_misys_default proc_meminfo:file { read };
# allow hal_misys_default hwservicemanager:binder { call transfer };
# allow hal_misys_default hal_misys_default_exec:file { read getattr map execute open entrypoint };

get_prop(hal_misys_default, vendor_camera_prop)